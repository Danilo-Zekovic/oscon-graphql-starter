  interface Person @model {
    id: ID! @unique
    firstName: String
    middleInitial: String
    lastName: String
  }

  enum PostType {
    NEWS
    SPORTS
    OPINION
    REVIEW
    ANALYSIS
    TECHNICAL
	}

  type Author implements Person @model {
    id: ID! @unique
    firstName: String
    middleInitial: String
    lastName: String

    # Fields unique to the implemented type
    posts: [Post!]
    # This is a derived field
    agent: Agent
  }

  type Agent implements Person {
    id: ID!
    firstName: String
    middleInitial: String
    lastName: String
    # Field unique to this implemented type
    represents: [Author]
  }

  type Post {
    id: Int!
    title: String
    author: Author
    articleType: PostType
  }

  input PostInput {
    title: String
    authorId: Int
    articleType: PostType
  }

  type Query {
    posts: [Post]
    authors: [Author]
    agents: [Agent]
    people: [Person]
    author(id: Int!): Author
    agent(id: Int!): Agent
  }

  type Mutation {
      createPost(input: PostInput): Post
    }

  # The subscription root type, specifying what we can subscribe to
  type Subscription {
      postAdded: Post
  }
